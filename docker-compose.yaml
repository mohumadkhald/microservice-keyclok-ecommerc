version: '3.7'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka
    container_name: broker
    ports:
      - "9092:9092"
      -  29092:29092
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafka-manager:
    image: hlebalbau/kafka-manager:latest
    container_name: kafka-manager
    ports:
      - "9005:9000"
    environment:
      ZK_HOSTS: zookeeper:2181
    depends_on:
      - zookeeper
      - broker



  # Confluent Control Center for Kafka Monitoring
#  control-center:
#    image: confluentinc/cp-enterprise-control-center
#    container_name: control-center
#    ports:
#      - "9021:9021"
#    environment:
#      CONTROL_CENTER_BOOTSTRAP_SERVERS: broker:29092
#      CONTROL_CENTER_ZOOKEEPER: zookeeper:2181
#      CONTROL_CENTER_LISTENER_PORT: 9021
#      CONTROL_CENTER_REPLICATION_FACTOR: 1
#    depends_on:
#      - zookeeper
#      - broker
#
#
#
#  schema-registry:
#    image: confluentinc/cp-schema-registry
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
#      SCHEMA_REGISTRY_HOST_NAME: schema-registry
#      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
#    depends_on:
#      - broker



  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9001:9000"
    environment:
      KAFKA_BROKER_CONNECT: broker:29092
      ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
      - broker




  notification-service:
    image: mohumadkhald/notification-service
    container_name: notification-service
    depends_on:
      - zipkin
      - discovery-server
      - api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  order-service:
    image: mohumadkhald/order-service
    container_name: order-service
    depends_on:
      - zipkin
      - discovery-server
      - mydb-mariadb
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092


  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"


  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:latest
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password


  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: keycloak-mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/



  inventory-service:
    image: mohumadkhald/inventory-service
    container_name: inventory-service
    depends_on:
      - zipkin
      - discovery-server
      - mydb-mariadb



  product-service:
    image: mohumadkhald/product-service
    container_name: product-service
    depends_on:
      - zipkin
      - discovery-server
      - api-gateway



  api-gateway:
    image: mohumadkhald/api-gateway
    container_name: api-gateway
    depends_on:
      - discovery-server
    ports:
      - "9000:9000"


  discovery-server:
    image: mohumadkhald/discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"




  mydb-mariadb:
    image: mariadb:latest
    container_name: mydb-mariadb
    environment:
      MARIADB_DATABASE: ${DB_NAME}
      MARIADB_USER: ${MYSQL_USER}
      MARIADB_PASSWORD: ${MYSQL_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mydb-data:/var/lib/mysql
    ports:
      - "3306:3306"


  phpmyadmin:
    image: phpmyadmin
    restart: always
    environment:
      PMA_HOST: mydb-mariadb
      PMA_PORT: 3306
      # PMA_USER: ${MYSQL_USER}
      # PMA_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "8000:80"
    depends_on:
      - mydb-mariadb






        ## Grafana / Prometheus

  ## Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - notification-service

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password

volumes:
  grafana_data:
  mydb-data:
    driver: local



networks:
  app-network:
    driver: bridge
